generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Applications {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  authorId    String
  type        String
  User        User     @relation(fields: [authorId], references: [id])
}

model BasicInformation {
  id         Int     @id @default(autoincrement())
  firstName  String
  middleName String?
  lastName   String
  gender     String
  age        Int
  location   String
  height     String
  body_type  String
  ethnicity  String
  occupation String
  userId     String  @unique
  User       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime
  postId    Int
  authorId  String
  User      User     @relation(fields: [authorId], references: [id])
  Post      Post     @relation(fields: [postId], references: [id])
}

model ContactInformation {
  id            Int         @id @default(autoincrement())
  email         String
  phone         String
  address1      String
  address2      String?
  city          String
  state         String
  code          Int
  type          String
  userProfileId Int
  UserProfile   UserProfile @relation(fields: [userProfileId], references: [id])
}

model Conversation {
  id          Int       @id @default(autoincrement())
  type        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  createdById String?
  User        User?     @relation(fields: [createdById], references: [id])
  Message     Message[]
}

model EducationInformation {
  id            Int         @id @default(autoincrement())
  name          String
  type          String
  userProfileId Int
  UserProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
}

model Message {
  id             Int          @id @default(autoincrement())
  message        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  conversationId Int
  userId         String
  Conversation   Conversation @relation(fields: [conversationId], references: [id])
  User           User         @relation(fields: [userId], references: [id])
}

model Note {
  id        Int      @id @default(autoincrement())
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime
  userId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Page {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime
  authorId  String
  type      String
  User      User     @relation(fields: [authorId], references: [id])
}

model Password {
  hash   String
  userId String @unique
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime
  viewCount Int
  tweetId   Int
  authorId  String
  Comment   Comment[]
  User      User      @relation(fields: [authorId], references: [id])
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  authorId    String
  type        String
  User        User     @relation(fields: [authorId], references: [id])
}

model Role {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  User        User[]
}

model Tags {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model Team {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  User        User[]
}

model Tweet {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime
  authorId  String
  User      User     @relation(fields: [authorId], references: [id])
}

model User {
  id               String            @id
  email            String            @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime
  username         String?           @unique
  avatar           String
  roleId           Int?
  teamId           Int?
  Applications     Applications[]
  BasicInformation BasicInformation?
  Comment          Comment[]
  Conversation     Conversation[]
  Message          Message[]
  Note             Note[]
  Page             Page[]
  Password         Password?
  Post             Post[]
  Project          Project[]
  Tweet            Tweet[]
  Role             Role?             @relation(fields: [roleId], references: [id])
  Team             Team?             @relation(fields: [teamId], references: [id])
  UserProfile      UserProfile?
}

model UserProfile {
  id                   Int                    @id @default(autoincrement())
  private              Boolean
  interests            String[]
  music_preferences    String[]
  movie_preferences    String[]
  sports_interests     String[]
  hair_color           String
  eye_color            String
  piercings            Boolean
  tattoos              Boolean
  preferred_age_range  String
  preferred_gender     String
  relationship_status  String
  about_me             String
  profile_photos       String[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  userId               String                 @unique
  basicInformationId   Int?
  ContactInformation   ContactInformation[]
  EducationInformation EducationInformation[]
  User                 User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
